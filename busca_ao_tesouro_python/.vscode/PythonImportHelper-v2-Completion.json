[
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "mixer",
        "importPath": "pygame",
        "description": "pygame",
        "isExtraImport": true,
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "depthFirstSearch",
        "importPath": "src.graph.search",
        "description": "src.graph.search",
        "isExtraImport": true,
        "detail": "src.graph.search",
        "documentation": {}
    },
    {
        "label": "breadthFirstSearch",
        "importPath": "src.graph.search",
        "description": "src.graph.search",
        "isExtraImport": true,
        "detail": "src.graph.search",
        "documentation": {}
    },
    {
        "label": "depthFirstSearch",
        "importPath": "src.graph.search",
        "description": "src.graph.search",
        "isExtraImport": true,
        "detail": "src.graph.search",
        "documentation": {}
    },
    {
        "label": "breadthFirstSearch",
        "importPath": "src.graph.search",
        "description": "src.graph.search",
        "isExtraImport": true,
        "detail": "src.graph.search",
        "documentation": {}
    },
    {
        "label": "depthFirstSearch",
        "importPath": "src.graph.search",
        "description": "src.graph.search",
        "isExtraImport": true,
        "detail": "src.graph.search",
        "documentation": {}
    },
    {
        "label": "depthFirstSearch",
        "importPath": "src.graph.search",
        "description": "src.graph.search",
        "isExtraImport": true,
        "detail": "src.graph.search",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "src.config.button",
        "description": "src.config.button",
        "isExtraImport": true,
        "detail": "src.config.button",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "src.config.button",
        "description": "src.config.button",
        "isExtraImport": true,
        "detail": "src.config.button",
        "documentation": {}
    },
    {
        "label": "graphRead",
        "importPath": "src.graph.read",
        "description": "src.graph.read",
        "isExtraImport": true,
        "detail": "src.graph.read",
        "documentation": {}
    },
    {
        "label": "graphRead",
        "importPath": "src.graph.read",
        "description": "src.graph.read",
        "isExtraImport": true,
        "detail": "src.graph.read",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "src.graph.vertice",
        "description": "src.graph.vertice",
        "isExtraImport": true,
        "detail": "src.graph.vertice",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "src.graph.vertice",
        "description": "src.graph.vertice",
        "isExtraImport": true,
        "detail": "src.graph.vertice",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "src.config.screen",
        "description": "src.config.screen",
        "isExtraImport": true,
        "detail": "src.config.screen",
        "documentation": {}
    },
    {
        "label": "draw_informationVetices",
        "importPath": "src.graph.informateVertice",
        "description": "src.graph.informateVertice",
        "isExtraImport": true,
        "detail": "src.graph.informateVertice",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "src.config.biome",
        "description": "src.config.biome",
        "isExtraImport": true,
        "detail": "src.config.biome",
        "documentation": {}
    },
    {
        "label": "Empty",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "src.config.color",
        "description": "src.config.color",
        "isExtraImport": true,
        "detail": "src.config.color",
        "documentation": {}
    },
    {
        "label": "gameOn",
        "importPath": "src.config.game",
        "description": "src.config.game",
        "isExtraImport": true,
        "detail": "src.config.game",
        "documentation": {}
    },
    {
        "label": "Biome",
        "kind": 6,
        "importPath": "src.config.biome",
        "description": "src.config.biome",
        "peekOfCode": "class Biome():\n    def __init__(self, x, y, image):\n        self.image = image\n        self.rect = self.image.get_rect()\n        self.rect.topleft = (x, y)\n    def draw_biome(self, surface):\n        surface.blit(self.image, (self.rect.x, self.rect.y))\ndef create_biome():\n    biome = pygame.image.load('./src/assets/biome-img/safe_biome.jpeg')\n    biome = pygame.transform.scale(biome, (200, 200))",
        "detail": "src.config.biome",
        "documentation": {}
    },
    {
        "label": "create_biome",
        "kind": 2,
        "importPath": "src.config.biome",
        "description": "src.config.biome",
        "peekOfCode": "def create_biome():\n    biome = pygame.image.load('./src/assets/biome-img/safe_biome.jpeg')\n    biome = pygame.transform.scale(biome, (200, 200))\n    return Biome(800, 0, biome)\ndef create_biome_0():\n    biome = pygame.image.load('./src/assets/image/home_beach_biome.jpeg')\n    biome = pygame.transform.scale(biome, (200, 200))\n    return Biome(800, 0, biome)\ndef create_biome_1():\n    biome = pygame.image.load('./src/assets/biome-img/carnivorus_plant_biome.jpg')",
        "detail": "src.config.biome",
        "documentation": {}
    },
    {
        "label": "create_biome_0",
        "kind": 2,
        "importPath": "src.config.biome",
        "description": "src.config.biome",
        "peekOfCode": "def create_biome_0():\n    biome = pygame.image.load('./src/assets/image/home_beach_biome.jpeg')\n    biome = pygame.transform.scale(biome, (200, 200))\n    return Biome(800, 0, biome)\ndef create_biome_1():\n    biome = pygame.image.load('./src/assets/biome-img/carnivorus_plant_biome.jpg')\n    biome = pygame.transform.scale(biome, (200, 200))\n    return Biome(800, 0, biome)\ndef create_biome_2():\n    biome = pygame.image.load('./src/assets/biome-img/healing_plant_biome1.jpeg')",
        "detail": "src.config.biome",
        "documentation": {}
    },
    {
        "label": "create_biome_1",
        "kind": 2,
        "importPath": "src.config.biome",
        "description": "src.config.biome",
        "peekOfCode": "def create_biome_1():\n    biome = pygame.image.load('./src/assets/biome-img/carnivorus_plant_biome.jpg')\n    biome = pygame.transform.scale(biome, (200, 200))\n    return Biome(800, 0, biome)\ndef create_biome_2():\n    biome = pygame.image.load('./src/assets/biome-img/healing_plant_biome1.jpeg')\n    biome = pygame.transform.scale(biome, (200, 200))\n    return Biome(800, 0, biome)\ndef create_biome_3():\n    biome = pygame.image.load('./src/assets/biome-img/poisonous_plant_biome.jpg')",
        "detail": "src.config.biome",
        "documentation": {}
    },
    {
        "label": "create_biome_2",
        "kind": 2,
        "importPath": "src.config.biome",
        "description": "src.config.biome",
        "peekOfCode": "def create_biome_2():\n    biome = pygame.image.load('./src/assets/biome-img/healing_plant_biome1.jpeg')\n    biome = pygame.transform.scale(biome, (200, 200))\n    return Biome(800, 0, biome)\ndef create_biome_3():\n    biome = pygame.image.load('./src/assets/biome-img/poisonous_plant_biome.jpg')\n    biome = pygame.transform.scale(biome, (200, 200))\n    return Biome(800, 0, biome)\ndef create_biome_4():\n    biome = pygame.image.load('./src/assets/biome-img/rock_slide_biome.jpeg')",
        "detail": "src.config.biome",
        "documentation": {}
    },
    {
        "label": "create_biome_3",
        "kind": 2,
        "importPath": "src.config.biome",
        "description": "src.config.biome",
        "peekOfCode": "def create_biome_3():\n    biome = pygame.image.load('./src/assets/biome-img/poisonous_plant_biome.jpg')\n    biome = pygame.transform.scale(biome, (200, 200))\n    return Biome(800, 0, biome)\ndef create_biome_4():\n    biome = pygame.image.load('./src/assets/biome-img/rock_slide_biome.jpeg')\n    biome = pygame.transform.scale(biome, (200, 200))\n    return Biome(800, 0, biome)\ndef create_biome_5():\n    biome = pygame.image.load('./src/assets/biome-img/swamp_biome.jpg')",
        "detail": "src.config.biome",
        "documentation": {}
    },
    {
        "label": "create_biome_4",
        "kind": 2,
        "importPath": "src.config.biome",
        "description": "src.config.biome",
        "peekOfCode": "def create_biome_4():\n    biome = pygame.image.load('./src/assets/biome-img/rock_slide_biome.jpeg')\n    biome = pygame.transform.scale(biome, (200, 200))\n    return Biome(800, 0, biome)\ndef create_biome_5():\n    biome = pygame.image.load('./src/assets/biome-img/swamp_biome.jpg')\n    biome = pygame.transform.scale(biome, (200, 200))\n    return Biome(800, 0, biome)",
        "detail": "src.config.biome",
        "documentation": {}
    },
    {
        "label": "create_biome_5",
        "kind": 2,
        "importPath": "src.config.biome",
        "description": "src.config.biome",
        "peekOfCode": "def create_biome_5():\n    biome = pygame.image.load('./src/assets/biome-img/swamp_biome.jpg')\n    biome = pygame.transform.scale(biome, (200, 200))\n    return Biome(800, 0, biome)",
        "detail": "src.config.biome",
        "documentation": {}
    },
    {
        "label": "Button",
        "kind": 6,
        "importPath": "src.config.button",
        "description": "src.config.button",
        "peekOfCode": "class Button():\n    def __init__(self, x, y, image):\n        self.image = image\n        self.rect = self.image.get_rect()\n        self.rect.topleft = (x, y)\n        self.clicked = False\n    def draw(self, surface):\n        action = False\n        position = pygame.mouse.get_pos()\n        if self.rect.collidepoint(position) == True:",
        "detail": "src.config.button",
        "documentation": {}
    },
    {
        "label": "create_button_reset",
        "kind": 2,
        "importPath": "src.config.button",
        "description": "src.config.button",
        "peekOfCode": "def create_button_reset():\n    start_img = pygame.image.load('./src/assets/button_image/reset_button.jpeg')\n    start_img = pygame.transform.scale(start_img, (200, 200))\n    return Button(800, 400, start_img)\ndef create_button_scape():\n    start_img = pygame.image.load('./src/assets/image/scape_button.jpeg')\n    start_img = pygame.transform.scale(start_img, (200, 200))\n    return Button(800, 400, start_img)\ndef create_button_next():\n    start_img = pygame.image.load('./src/assets/image/next_button.jpeg')",
        "detail": "src.config.button",
        "documentation": {}
    },
    {
        "label": "create_button_scape",
        "kind": 2,
        "importPath": "src.config.button",
        "description": "src.config.button",
        "peekOfCode": "def create_button_scape():\n    start_img = pygame.image.load('./src/assets/image/scape_button.jpeg')\n    start_img = pygame.transform.scale(start_img, (200, 200))\n    return Button(800, 400, start_img)\ndef create_button_next():\n    start_img = pygame.image.load('./src/assets/image/next_button.jpeg')\n    start_img = pygame.transform.scale(start_img, (200, 200))\n    return Button(800, 200, start_img)\ndef create_button_combat():\n    start_img = pygame.image.load('./src/assets/image/combat_button.jpeg')",
        "detail": "src.config.button",
        "documentation": {}
    },
    {
        "label": "create_button_next",
        "kind": 2,
        "importPath": "src.config.button",
        "description": "src.config.button",
        "peekOfCode": "def create_button_next():\n    start_img = pygame.image.load('./src/assets/image/next_button.jpeg')\n    start_img = pygame.transform.scale(start_img, (200, 200))\n    return Button(800, 200, start_img)\ndef create_button_combat():\n    start_img = pygame.image.load('./src/assets/image/combat_button.jpeg')\n    start_img = pygame.transform.scale(start_img, (200, 200))\n    return Button(800, 200, start_img)",
        "detail": "src.config.button",
        "documentation": {}
    },
    {
        "label": "create_button_combat",
        "kind": 2,
        "importPath": "src.config.button",
        "description": "src.config.button",
        "peekOfCode": "def create_button_combat():\n    start_img = pygame.image.load('./src/assets/image/combat_button.jpeg')\n    start_img = pygame.transform.scale(start_img, (200, 200))\n    return Button(800, 200, start_img)",
        "detail": "src.config.button",
        "documentation": {}
    },
    {
        "label": "colorPointBlue",
        "kind": 5,
        "importPath": "src.config.color",
        "description": "src.config.color",
        "peekOfCode": "colorPointBlue = (50, 100, 200) #azul\ncolorPointRed = (200, 50, 100) #vermelho\ncolorPointGreen = (50, 200, 100) #verde\ncolorPointWhite = (255, 255, 255) #branco",
        "detail": "src.config.color",
        "documentation": {}
    },
    {
        "label": "colorPointRed",
        "kind": 5,
        "importPath": "src.config.color",
        "description": "src.config.color",
        "peekOfCode": "colorPointRed = (200, 50, 100) #vermelho\ncolorPointGreen = (50, 200, 100) #verde\ncolorPointWhite = (255, 255, 255) #branco",
        "detail": "src.config.color",
        "documentation": {}
    },
    {
        "label": "colorPointGreen",
        "kind": 5,
        "importPath": "src.config.color",
        "description": "src.config.color",
        "peekOfCode": "colorPointGreen = (50, 200, 100) #verde\ncolorPointWhite = (255, 255, 255) #branco",
        "detail": "src.config.color",
        "documentation": {}
    },
    {
        "label": "colorPointWhite",
        "kind": 5,
        "importPath": "src.config.color",
        "description": "src.config.color",
        "peekOfCode": "colorPointWhite = (255, 255, 255) #branco",
        "detail": "src.config.color",
        "documentation": {}
    },
    {
        "label": "gameOn",
        "kind": 2,
        "importPath": "src.config.game",
        "description": "src.config.game",
        "peekOfCode": "def gameOn(verticeObjective, end, statusGame, startTime):\n    if statusGame > -1:\n        global graph\n        draw_backGround(backGround, screen)\n        draw_edges(graph, screen)\n        draw_vertices(graph, screen)\n        draw_informationVetices(graph, screen)\n        if button_reset.draw(screen):\n            graph = graphRead()\n            return 3",
        "detail": "src.config.game",
        "documentation": {}
    },
    {
        "label": "nextPosition",
        "kind": 2,
        "importPath": "src.config.game",
        "description": "src.config.game",
        "peekOfCode": "def nextPosition(personVertice, verticeObjective):\n    # get the best neighbor of the character's current vertice\n    bestNeighboringVertice = breadthFirstSearch(graph, graph[personVertice], graph[verticeObjective])\n    neighboringList = copy.deepcopy(graph[personVertice].adjacentVertices)\n    # 50% of being chosen the best vertice\n    porcente = 2/10\n    luckNumber = random.randint(0, len(neighboringList))\n    # choosing the next vertice\n    neighboringChoice = bestNeighboringVertice\n    if luckNumber > int(len(neighboringList)*porcente):",
        "detail": "src.config.game",
        "documentation": {}
    },
    {
        "label": "step",
        "kind": 2,
        "importPath": "src.config.game",
        "description": "src.config.game",
        "peekOfCode": "def step(personVertice, nextVertice):\n    #change the person's vertice\n    graph[personVertice].person = False\n    graph[nextVertice].person = True\ndef startMessage(statusGame, startTime):\n    draw_backGround(backGround, screen)\n    draw_edges(graph, screen)\n    draw_vertices(graph, screen)\n    draw_informationVetices(graph, screen)\n    if statusGame == -1:",
        "detail": "src.config.game",
        "documentation": {}
    },
    {
        "label": "startMessage",
        "kind": 2,
        "importPath": "src.config.game",
        "description": "src.config.game",
        "peekOfCode": "def startMessage(statusGame, startTime):\n    draw_backGround(backGround, screen)\n    draw_edges(graph, screen)\n    draw_vertices(graph, screen)\n    draw_informationVetices(graph, screen)\n    if statusGame == -1:\n        txttela = fontesys.render('Prepare-se, a ilha está a vista', 1, (255,255,255))\n    elif statusGame == -2:\n        txttela = fontesys.render('Desvende segredos ocultos e tesouros.', 1, (255,255,255))\n    elif statusGame == -3:",
        "detail": "src.config.game",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "src.config.game",
        "description": "src.config.game",
        "peekOfCode": "screen = createScreen()\nbackGround = createBackground()\ngraph = graphRead()\nbutton_reset = create_button_reset()\nbutton_next = create_button_next()\npygame.font.init()\nfonte = pygame.font.get_default_font()\nfontesys = pygame.font.SysFont(fonte, 40)  \ndef gameOn(verticeObjective, end, statusGame, startTime):\n    if statusGame > -1:",
        "detail": "src.config.game",
        "documentation": {}
    },
    {
        "label": "backGround",
        "kind": 5,
        "importPath": "src.config.game",
        "description": "src.config.game",
        "peekOfCode": "backGround = createBackground()\ngraph = graphRead()\nbutton_reset = create_button_reset()\nbutton_next = create_button_next()\npygame.font.init()\nfonte = pygame.font.get_default_font()\nfontesys = pygame.font.SysFont(fonte, 40)  \ndef gameOn(verticeObjective, end, statusGame, startTime):\n    if statusGame > -1:\n        global graph",
        "detail": "src.config.game",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "src.config.game",
        "description": "src.config.game",
        "peekOfCode": "graph = graphRead()\nbutton_reset = create_button_reset()\nbutton_next = create_button_next()\npygame.font.init()\nfonte = pygame.font.get_default_font()\nfontesys = pygame.font.SysFont(fonte, 40)  \ndef gameOn(verticeObjective, end, statusGame, startTime):\n    if statusGame > -1:\n        global graph\n        draw_backGround(backGround, screen)",
        "detail": "src.config.game",
        "documentation": {}
    },
    {
        "label": "button_reset",
        "kind": 5,
        "importPath": "src.config.game",
        "description": "src.config.game",
        "peekOfCode": "button_reset = create_button_reset()\nbutton_next = create_button_next()\npygame.font.init()\nfonte = pygame.font.get_default_font()\nfontesys = pygame.font.SysFont(fonte, 40)  \ndef gameOn(verticeObjective, end, statusGame, startTime):\n    if statusGame > -1:\n        global graph\n        draw_backGround(backGround, screen)\n        draw_edges(graph, screen)",
        "detail": "src.config.game",
        "documentation": {}
    },
    {
        "label": "button_next",
        "kind": 5,
        "importPath": "src.config.game",
        "description": "src.config.game",
        "peekOfCode": "button_next = create_button_next()\npygame.font.init()\nfonte = pygame.font.get_default_font()\nfontesys = pygame.font.SysFont(fonte, 40)  \ndef gameOn(verticeObjective, end, statusGame, startTime):\n    if statusGame > -1:\n        global graph\n        draw_backGround(backGround, screen)\n        draw_edges(graph, screen)\n        draw_vertices(graph, screen)",
        "detail": "src.config.game",
        "documentation": {}
    },
    {
        "label": "fonte",
        "kind": 5,
        "importPath": "src.config.game",
        "description": "src.config.game",
        "peekOfCode": "fonte = pygame.font.get_default_font()\nfontesys = pygame.font.SysFont(fonte, 40)  \ndef gameOn(verticeObjective, end, statusGame, startTime):\n    if statusGame > -1:\n        global graph\n        draw_backGround(backGround, screen)\n        draw_edges(graph, screen)\n        draw_vertices(graph, screen)\n        draw_informationVetices(graph, screen)\n        if button_reset.draw(screen):",
        "detail": "src.config.game",
        "documentation": {}
    },
    {
        "label": "fontesys",
        "kind": 5,
        "importPath": "src.config.game",
        "description": "src.config.game",
        "peekOfCode": "fontesys = pygame.font.SysFont(fonte, 40)  \ndef gameOn(verticeObjective, end, statusGame, startTime):\n    if statusGame > -1:\n        global graph\n        draw_backGround(backGround, screen)\n        draw_edges(graph, screen)\n        draw_vertices(graph, screen)\n        draw_informationVetices(graph, screen)\n        if button_reset.draw(screen):\n            graph = graphRead()",
        "detail": "src.config.game",
        "documentation": {}
    },
    {
        "label": "createScreen",
        "kind": 2,
        "importPath": "src.config.screen",
        "description": "src.config.screen",
        "peekOfCode": "def createScreen():\n    screen = pygame.display.set_mode((screen_width, screen_height), 0)\n    pygame.display.set_caption('Busca ao Tesouro')\n    return screen\ndef createBackground():\n    backGround = pygame.image.load('./src/assets/mapa_image/image.png')\n    backGround = pygame.transform.scale(backGround, (screen_width - 200, screen_height))\n    return backGround\ndef draw_backGround(backGround, surface):\n    surface.blit(backGround, (0, 0))",
        "detail": "src.config.screen",
        "documentation": {}
    },
    {
        "label": "createBackground",
        "kind": 2,
        "importPath": "src.config.screen",
        "description": "src.config.screen",
        "peekOfCode": "def createBackground():\n    backGround = pygame.image.load('./src/assets/mapa_image/image.png')\n    backGround = pygame.transform.scale(backGround, (screen_width - 200, screen_height))\n    return backGround\ndef draw_backGround(backGround, surface):\n    surface.blit(backGround, (0, 0))",
        "detail": "src.config.screen",
        "documentation": {}
    },
    {
        "label": "draw_backGround",
        "kind": 2,
        "importPath": "src.config.screen",
        "description": "src.config.screen",
        "peekOfCode": "def draw_backGround(backGround, surface):\n    surface.blit(backGround, (0, 0))",
        "detail": "src.config.screen",
        "documentation": {}
    },
    {
        "label": "screen_width",
        "kind": 5,
        "importPath": "src.config.screen",
        "description": "src.config.screen",
        "peekOfCode": "screen_width = 1000\nscreen_height = 600\ndef createScreen():\n    screen = pygame.display.set_mode((screen_width, screen_height), 0)\n    pygame.display.set_caption('Busca ao Tesouro')\n    return screen\ndef createBackground():\n    backGround = pygame.image.load('./src/assets/mapa_image/image.png')\n    backGround = pygame.transform.scale(backGround, (screen_width - 200, screen_height))\n    return backGround",
        "detail": "src.config.screen",
        "documentation": {}
    },
    {
        "label": "screen_height",
        "kind": 5,
        "importPath": "src.config.screen",
        "description": "src.config.screen",
        "peekOfCode": "screen_height = 600\ndef createScreen():\n    screen = pygame.display.set_mode((screen_width, screen_height), 0)\n    pygame.display.set_caption('Busca ao Tesouro')\n    return screen\ndef createBackground():\n    backGround = pygame.image.load('./src/assets/mapa_image/image.png')\n    backGround = pygame.transform.scale(backGround, (screen_width - 200, screen_height))\n    return backGround\ndef draw_backGround(backGround, surface):",
        "detail": "src.config.screen",
        "documentation": {}
    },
    {
        "label": "points",
        "kind": 5,
        "importPath": "src.graph.info",
        "description": "src.graph.info",
        "peekOfCode": "points = [\n    [0, (180, 290), [2, 20, 32, 39], False, False, False, -1], \n    [1, (300, 200), [2, 7, 23, 36, 37], False, False, False, -1],\n    [2, (200, 200), [0, 1, 20, 36, 37], False, False, False, 4],\n    [3, (450, 100), [4, 5, 6], False, False, True, -1],\n    [4, (450, 150), [3, 5, 6, 8, 34], False, False, False, -1],\n    [5, (400, 150), [3 , 4, 7, 8, 37, 38], False, False, False, -1],\n    [6, (500, 150), [3, 4, 31, 34], False, False, False, -1],\n    [7, (360, 180), [1, 5, 23, 37, 38], False, False, False, -1],\n    [8, (420, 190), [4, 5, 24, 34, 38], False, False, False, -1],",
        "detail": "src.graph.info",
        "documentation": {}
    },
    {
        "label": "draw_informationVetices",
        "kind": 2,
        "importPath": "src.graph.informateVertice",
        "description": "src.graph.informateVertice",
        "peekOfCode": "def draw_informationVetices(graph, surface):\n    personVertice = depthFirstSearch(graph, graph[0])\n    biomeType = graph[personVertice].strangeBiome\n    if biomeType == 0:\n        info = create_biome_0()\n    elif biomeType == 1:\n        info = create_biome_1()\n    elif biomeType == 2:\n        info = create_biome_2()\n    elif biomeType == 3:",
        "detail": "src.graph.informateVertice",
        "documentation": {}
    },
    {
        "label": "graphRead",
        "kind": 2,
        "importPath": "src.graph.read",
        "description": "src.graph.read",
        "peekOfCode": "def graphRead():\n    graph = []\n    for item in points:\n        graph.append(verticeGraph(item[0], item[1], item[2], item[3], item[4], item[5], item[6]))\n    return graph",
        "detail": "src.graph.read",
        "documentation": {}
    },
    {
        "label": "breadthFirstSearch",
        "kind": 2,
        "importPath": "src.graph.search",
        "description": "src.graph.search",
        "peekOfCode": "def breadthFirstSearch(graph, vertice, verticeObjective):\n    color = []\n    # distance = []\n    father = []\n    queue = []\n    # teste = []\n    for item in graph:\n        # teste.append(item.id)\n        color.append(branco)\n        # distance.append(1000) #infinito",
        "detail": "src.graph.search",
        "documentation": {}
    },
    {
        "label": "visit",
        "kind": 2,
        "importPath": "src.graph.search",
        "description": "src.graph.search",
        "peekOfCode": "def visit(graph, vertice, color):\n    color[vertice.id] = cinza\n    status = -1\n    for verticeV in vertice.adjacentVertices:\n        if graph[verticeV].person == True:\n            return graph[verticeV].id\n        if color[graph[verticeV].id] == branco:\n            status = visit(graph, graph[verticeV], color)\n        if status != -1:\n            return status",
        "detail": "src.graph.search",
        "documentation": {}
    },
    {
        "label": "depthFirstSearch",
        "kind": 2,
        "importPath": "src.graph.search",
        "description": "src.graph.search",
        "peekOfCode": "def depthFirstSearch(graph, vertice):\n    color = []\n    for item in graph:\n        color.append(branco)\n    return visit(graph, vertice, color)",
        "detail": "src.graph.search",
        "documentation": {}
    },
    {
        "label": "branco",
        "kind": 5,
        "importPath": "src.graph.search",
        "description": "src.graph.search",
        "peekOfCode": "branco = 0\ncinza = 1\npreto = 2\ndef breadthFirstSearch(graph, vertice, verticeObjective):\n    color = []\n    # distance = []\n    father = []\n    queue = []\n    # teste = []\n    for item in graph:",
        "detail": "src.graph.search",
        "documentation": {}
    },
    {
        "label": "cinza",
        "kind": 5,
        "importPath": "src.graph.search",
        "description": "src.graph.search",
        "peekOfCode": "cinza = 1\npreto = 2\ndef breadthFirstSearch(graph, vertice, verticeObjective):\n    color = []\n    # distance = []\n    father = []\n    queue = []\n    # teste = []\n    for item in graph:\n        # teste.append(item.id)",
        "detail": "src.graph.search",
        "documentation": {}
    },
    {
        "label": "preto",
        "kind": 5,
        "importPath": "src.graph.search",
        "description": "src.graph.search",
        "peekOfCode": "preto = 2\ndef breadthFirstSearch(graph, vertice, verticeObjective):\n    color = []\n    # distance = []\n    father = []\n    queue = []\n    # teste = []\n    for item in graph:\n        # teste.append(item.id)\n        color.append(branco)",
        "detail": "src.graph.search",
        "documentation": {}
    },
    {
        "label": "verticeGraph",
        "kind": 6,
        "importPath": "src.graph.vertice",
        "description": "src.graph.vertice",
        "peekOfCode": "class verticeGraph():\n    def __init__(self, id, coordenate, adjacentVertices, person=False, savePoint=False, treasure=False, strangeBiome=0):\n        self.id = id\n        self.coordinate = (coordenate[0], coordenate[1])\n        self.savePoint = savePoint\n        self.person = person\n        self.adjacentVertices = adjacentVertices\n        self.treasure = treasure\n        self.item = False\n        self.strangeBiome = strangeBiome",
        "detail": "src.graph.vertice",
        "documentation": {}
    },
    {
        "label": "draw_vertices",
        "kind": 2,
        "importPath": "src.graph.vertice",
        "description": "src.graph.vertice",
        "peekOfCode": "def draw_vertices(graph, surface):\n    for vertice in graph:\n        if vertice.person == True:\n            pygame.draw.circle(surface, colorPointGreen, vertice.coordinate, 8, 0)\n        elif vertice.savePoint == True:\n            pygame.draw.circle(surface, colorPointWhite, vertice.coordinate, 8, 0)\n        elif vertice.treasure == True:\n            pygame.draw.circle(surface, colorPointRed, vertice.coordinate, 8, 0)\n        else:\n            pygame.draw.circle(surface, colorPointBlue, vertice.coordinate, 8, 0)",
        "detail": "src.graph.vertice",
        "documentation": {}
    },
    {
        "label": "draw_edges",
        "kind": 2,
        "importPath": "src.graph.vertice",
        "description": "src.graph.vertice",
        "peekOfCode": "def draw_edges(graph, surface):\n    for vertice in graph:\n        for neighboring in vertice.adjacentVertices:\n            pygame.draw.line(surface, colorPointBlue, vertice.coordinate, graph[neighboring].coordinate, 2)",
        "detail": "src.graph.vertice",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "run = True\n#statusGame code 0 - continue, 1 - change goal, 2 - finish game, 3 - reset \nverticeObjective = 3\nend = False\nstatusGame = -1\nstartTime = pygame.time.get_ticks()\nwhile run:\n    statusGame = gameOn(verticeObjective, end, statusGame, startTime)\n    if statusGame == 1:\n        verticeObjective = 10",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "verticeObjective",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "verticeObjective = 3\nend = False\nstatusGame = -1\nstartTime = pygame.time.get_ticks()\nwhile run:\n    statusGame = gameOn(verticeObjective, end, statusGame, startTime)\n    if statusGame == 1:\n        verticeObjective = 10\n        print('Change Goal')\n    if statusGame == 2:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "end = False\nstatusGame = -1\nstartTime = pygame.time.get_ticks()\nwhile run:\n    statusGame = gameOn(verticeObjective, end, statusGame, startTime)\n    if statusGame == 1:\n        verticeObjective = 10\n        print('Change Goal')\n    if statusGame == 2:\n        end = True",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "statusGame",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "statusGame = -1\nstartTime = pygame.time.get_ticks()\nwhile run:\n    statusGame = gameOn(verticeObjective, end, statusGame, startTime)\n    if statusGame == 1:\n        verticeObjective = 10\n        print('Change Goal')\n    if statusGame == 2:\n        end = True\n    if statusGame == 3:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "startTime",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "startTime = pygame.time.get_ticks()\nwhile run:\n    statusGame = gameOn(verticeObjective, end, statusGame, startTime)\n    if statusGame == 1:\n        verticeObjective = 10\n        print('Change Goal')\n    if statusGame == 2:\n        end = True\n    if statusGame == 3:\n        verticeObjective = 3",
        "detail": "main",
        "documentation": {}
    }
]